/*Jerome Hayes JrString.cpp1/27/16This program contain implementations of the member functions of String.h100% doneEverything is in 0(n)*/#include "String.h"#include <cstring>String::String(){    size = 0;    buffer = 0;}String::String(const String & source){    size = source.size;    buffer = new char[size];    for(int i=0; i<size; i++) {        buffer[i]= source.buffer[i];    }}String::String(const char *p){    size = strlen(p);    buffer = new char[size];    for(int i=0; i<size; i++) {        buffer[i]= p[i];    }}String:: ~String(){    delete[] buffer;        //delete everything inside buffer reserved return spaces also.    size =0;}bool operator ==(const String & s, const String & t){    if(s.size == t.size) {        for(int i=0; i < s.size; i++) {            if(s.buffer[i] == t.buffer[i])                return true;            else                return false;           }    }    return false;}bool operator <= (const String & s, const String & t){    if(s.size >= t.size) {        for (int i=0; i < s.size; i++) {            if(s.buffer[i] <= t.buffer[i])                return true;            else                return false;        }    }    else if (s.size <= t.size) {        for (int i=0; i < t.size; i++) {            if (s.buffer[i] <= t.size)                return true;            else                return false;        }    }    return false;}bool operator < (const String & s, const String & t){    if(s.size >= t.size) {        for(int i=0; i < s.size; i++){            if (s.buffer[i] > t.buffer[i])                return false;            else                return true;        }    }        else if (s.size <= t.size) {        for(int i=0; i < t.size; i++) {            if (s.buffer[i] < t.buffer[i])                return true;            else                return false;        }    }    return false;}ostream & operator << (ostream & output, const String & s){    for(int i=0; i < s.size; i++) {        output << s.buffer[i];    }    return output;}int String::length(){    return size;}char & String:: operator[ ](const unsigned int i)    //return reference to characer at location{    return buffer[i];}String & String::operator =(const String & s){    delete[] buffer;    size = s.size;    buffer = new char[size];        for(int i=0; i<size; i++)        buffer[i] = s.buffer[i];    return * this;}void String::operator+=(const String & n){    char *temp;    int leng = size + n.size;    temp = new char[leng];        strcpy(temp, buffer);    strcat(temp, n.buffer);    delete [] buffer;    buffer = temp;    size = leng;}bool operator > (const String &s, const String &t){    int i;    if (s.size >= t.size){        for (i = 0; i < s.size + 1; i++) {            if (s.buffer[i] > t.buffer[i])                 return true;            else                return false;        }    }    if (s.size <= t.size) {        for (i = 0; i < t.size + 1; i++) {           if (s.buffer[i] > t.buffer[i])                return true;           else               return false;        }    }    return false;}//O(n)bool operator >= (const String &s, const String &t){    int i;    if (s.size >= t.size){        for (i = 0; i < s.size; i++) {            if (s.buffer[i] >= t.buffer[i])                 return true;            else                return false;        }    }    if (s.size <= t.size) {        for (i = 0; i < t.size; i++) {           if (s.buffer[i] >= t.buffer[i])                return true;           else               return false;        }    }    return false;}//O(n)    //hw assignmentString & String::operator * (const unsigned int n){    char *temp;    int leng=0;    for(int i=0; i<n; i++)    {       leng += size;    }    temp = new char[leng];    strcpy(temp, buffer);      //char*  strcpy ( char * destination, const char * source );    for(int i=0; i<n; i++)    {        strcat(temp, buffer);    }    size = leng;    delete [] buffer;    buffer = temp;    return * this;}String & String::operator + (const String &s const String&t){    char *temp;    int leng = t.size + s.size;    temp = new char[leng];        strcpy(temp,s.buffer);    strcat(temp, t.buffer);    delete [] buffer;    buffer = temp;    size = leng;    return * this;}