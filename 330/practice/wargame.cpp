/*Jerome Hayes Jrwargame.cpp2/24/2016This program simulates the game of war. Each player gets 3 cards.Each player displays one of her cards. The player with the highest ranking card wins 2 points.In case of a tie each player gets 1 point. After each round, each player draws a newcard from the deck.implementation: This program uses 4 classes: Card, Deck, Player, and RandomInteger.It is a good example of Object Oriented Programming(OOP). Note the simplicity of eachclass and the main() function*/#include <iostream>#include <stdlib.h>     // for rand()#include <algorithm>    // for random_shuffle()using namespace std;    enum suits {diamond, club, heart, spade };class Card {    int     rank;   // rank of card    suits   suit;   // suit of cardpublic:    // constructors    Card();             //initialize a card with default values    Card(suits, int);   //initialize a card with given values    // accessors    int getRank() { return rank;}   // an in-line function    suits getSuit() { return suit;}    // mutators    void setRank(int rv) { rank = rv;}    void setSuit(int sv) { rank = sv;}}; // cardCard::Card(){    rank = 1;    suit = spade;} // constructorCard::Card(suits sv, int rv){    rank = rv;    suit = sv;} // constructor//output a textual presentation of a Cardostream & operator<<(ostream & out, Card aCard){    switch (int rank = aCard.getRank()) {        case 1: out << "Ace"; break;        case 11: out << "Jack"; break;        case 12: out << "Queen"; break;        case 13: out << "King"; break;        default: out << rank;    }        switch (suits suit = aCard.getSuit()) {        case diamond: out << " of Diamonds"; break;        case club: out << " of Clubs"; break;        case heart: out << " of Hearts"; break;        case spade: out << " of Spades"; break;    }    return out;}class RandomInteger {    public:        unsigned int operator() (unsigned int);};unsigned int RandomInteger::operator() (unsigned int max){    unsigned int rval = rand();    return rval % max;}RandomInteger randomizer;class Deck {    Card cards[52];     //deck of 52 cards    int topCard;        //size of deckpublic:    Deck();    // shuffle uses the generic algorithm random_shuffle from STL    void shuffle() {random_shuffle(cards, cards+52, randomizer);}    bool isEmpty() {return topCard <= 0;}     Card draw();}; //DeckDeck::Deck(){    topCard = 0;    for (int i = 1; i < 13; i++) {        Card c1(diamond, i), c2(spade, i), c3(heart, i), c4(club, i);        cards[topCard++] = c1;        cards[topCard++] = c2;        cards[topCard++] = c3;        cards[topCard++] = c4;    }}Card Deck::draw(){    if(!isEmpty())        return cards[--topCard];    else {        Card spadeAce(spade, 1);        return spadeAce;    }}class Player {    Card myCards[3];    int myScore;    int removedCard;public:    Player(Deck &);    Card draw();    void addPoints(int howMany) {myScore += howMany;}    int score() {return myScore;}    void replaceCard(Deck &aDeck) {myCards[removedCard] = aDeck.draw();}};Player::Player(Deck & aDeck){    myScore = 0;    for (int i = 0;i < 3; i++)        myCards[i] = aDeck.draw();    removedCard = 0;}Card Player::draw(){    removedCard = randomizer(3);    return myCards[removedCard];}int main(){    Deck theDeck;       //create a deck    theDeck.shuffle();    //create two players    Player player1(theDeck);    Player player2(theDeck);    while (!theDeck.isEmpty()) {        Card card1 = player1.draw();        cout << "Player 1 plays: " << card1 << endl;        Card card2 = player2.draw();        cout << "Player 2 plays:" << card2 << endl;                if (card1.getRank() == card2.getRank()) {            player1.addPoints(1);            player2.addPoints(1);            cout << "Players tie \n \n";        }else if (card1.getRank() > card2.getRank()) {            player1.addPoints(1);             cout << "Player 1 wins this round \n \n";        }else{            player2.addPoints(1);            cout << "Player 2 wins this round \n \n";        }        player1.replaceCard(theDeck);        player2.replaceCard(theDeck);    }    cout << "Player 1 score: " << player1.score() <<endl;    cout << "Player 2 score:" << player2.score() << endl;}